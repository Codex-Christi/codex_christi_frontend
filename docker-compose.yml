services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: codex-con-app-start
    env_file:
      - .env.production
    volumes:
      - 'app_build:/app/.next'
    command: ['yarn', 'start']
    ports:
      - 3000:3000
    restart: always
    networks:
      - webserver-network
    depends_on:
      app_build:
        condition: service_completed_successfully

    # The one-off container that builds the application
    app_build:
      build:
        context: .
        dockerfile: Dockerfile
        target: builder # <-- important
      container_name: codex-con-app-build
      env_file:
        - .env.production
      volumes:
        - 'app_build:/cache' # mount the volume at /cache (donâ€™t shadow /app/.next)
      command:
        [
          'sh',
          '-c',
          'set -eu; rm -rf /cache/*; cp -a /app/.next/. /cache/; test -f /cache/BUILD_ID',
        ]
      restart: 'no'
      healthcheck:
        test: ['CMD', 'sh', '-c', 'test -f /cache/BUILD_ID']
        interval: 5s
        timeout: 2s
        retries: 12

volumes:
  # The volume that is going to store the .next directory where the built
  # application is located
  app_build: {}
networks:
  webserver-network:
    external: true
    name: webserver-network
